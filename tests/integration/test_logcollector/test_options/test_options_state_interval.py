'''
copyright: Copyright (C) 2015-2022, KhulnaSoft Ltd.

           Created by Cyware, Inc. <info@khulnasoft.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: The 'cyware-logcollector' daemon monitors configured files and commands for new log messages.
       Specifically, these tests will check if the logcollector updates the 'cyware-logcollector.state'
       file at the periods set in the 'logcollector.state_interval' internal option. Log data collection
       is the real-time process of making sense out of the records generated by servers or devices.
       This component can receive logs through text files or Windows event logs. It can also directly
       receive logs via remote syslog which is useful for firewalls and other such devices.

components:
    - logcollector

suite: options

targets:
    - agent
    - manager

daemons:
    - cyware-logcollector

os_platform:
    - linux
    - windows

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - Debian Buster
    - Red Hat 8
    - Ubuntu Focal
    - Ubuntu Bionic
    - Windows 10
    - Windows Server 2019
    - Windows Server 2016

references:
    - https://documentation.cyware.khulnasoft.com/current/user-manual/capabilities/log-data-collection/index.html
    - https://documentation.cyware.khulnasoft.com/current/user-manual/reference/ossec-conf/localfile.html
    - https://documentation.cyware.khulnasoft.com/current/user-manual/reference/statistics-files/cyware-logcollector-state.html
    - https://documentation.cyware.khulnasoft.com/current/user-manual/reference/internal-options.html#logcollector

tags:
    - logcollector_options
'''
import os
import sys
from time import sleep

import pytest
import cyware_testing.tools.configuration as conf
from cyware_testing import logcollector
from cyware_testing.tools import LOGCOLLECTOR_STATISTICS_FILE
from cyware_testing.tools import LOG_FILE_PATH
from cyware_testing.tools.monitoring import FileMonitor
from cyware_testing.tools.services import check_daemon_status
from cyware_testing.tools.services import control_service

# Marks
pytestmark = pytest.mark.tier(level=1)
elapsed_time_modification = 1


# Configuration
state_interval = [-2, 753951, 'dummy', 5, 30, 10, 15]
cyware_log_monitor = FileMonitor(LOG_FILE_PATH)
state_interval_update_timeout = 10


# Fixtures
@pytest.fixture(scope="module", params=state_interval)
def get_local_internal_options(request):
    """Get configurations from the module."""
    backup_options_lines = conf.get_cyware_local_internal_options()
    if sys.platform == 'win32':
        conf.add_cyware_local_internal_options({'\n windows.debug': '2'})
    else:
        conf.add_cyware_local_internal_options({'\n logcollector.debug': '2'})
    conf.add_cyware_local_internal_options({'logcollector.state_interval': request.param})

    yield request.param

    conf.set_cyware_local_internal_options(backup_options_lines)
    control_service('restart')


def test_options_state_interval(get_local_internal_options, file_monitoring):
    '''
    description: Check if the 'cyware-logcollector' daemon updates the statistic file 'cyware-logcollector.state'
                 from the values set in the 'logcollector.state_interval' internal option. For this purpose,
                 the test will check if the value stored in that internal option is an integer, and its value is
                 beetwen the allowed limits, if not, it will verify that the Cyware is stopped (on Windows systems)
                 or an error event is generated (on Linux systems). Finally, if the interval value is valid, it
                 will verify that the 'cyware-logcollector.state' file is updated at the specified intervals by
                 checking the properties of that file.

    cyware_min_version: 4.2.0

    tier: 1

    parameters:
        - get_local_internal_options:
            type: fixture
            brief: Get local internal options from the module.
        - file_monitoring:
            type: fixture
            brief: Handle the monitoring of a specified file.

    assertions:
        - Verify that the logcollector updates the 'cyware-logcollector.state' file
          at the periods set in the 'logcollector.state_interval' internal option.
        - Verify that the logcollector detects the values that exceed the limits
          for the 'logcollector.state_interval' internal option.
        - Verify that the logcollector detects invalid values for the 'logcollector.state_interval' internal option.

    input_description: Different test cases are defined in the module. Those include values for
                       the 'logcollector.state_interval' internal option.

    expected_output:
        - r'Invalid definition for logcollector.state_interval.*'

    tags:
        - invalid_settings
    '''
    interval = get_local_internal_options
    if not isinstance(interval, int) or (interval not in range(0, 36001)):
        with pytest.raises(ValueError):
            if sys.platform == 'win32':
                pytest.xfail("Windows agent allows invalid localfile configuration:\
                                https://github.com/cyware/cyware/issues/10890")
            control_service('restart')
            log_callback = logcollector.callback_invalid_state_interval(interval)
            cyware_log_monitor.start(timeout=logcollector.LOG_COLLECTOR_GLOBAL_TIMEOUT, callback=log_callback,
                                    error_message=f"The message: 'Invalid definition for "
                                                  f"logcollector.state_interval: {interval}.' didn't appear")
    else:
        control_service('restart')
        sleep(state_interval_update_timeout)
        logcollector.wait_statistics_file(timeout=interval + 5)
        previous_modification_time = os.path.getmtime(LOGCOLLECTOR_STATISTICS_FILE)
        last_modification_time = os.path.getmtime(LOGCOLLECTOR_STATISTICS_FILE)
        while last_modification_time == previous_modification_time:
            sleep(elapsed_time_modification)
            last_modification_time = os.path.getmtime(LOGCOLLECTOR_STATISTICS_FILE)
        elapsed = last_modification_time - previous_modification_time
        if sys.platform == 'win32':
            assert interval - 30 < elapsed < interval + 30
        else:
            assert interval - 1 < elapsed < interval + 1
