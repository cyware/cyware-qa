'''
copyright: Copyright (C) 2015-2022, KhulnaSoft Ltd.

           Created by Cyware, Inc. <info@khulnasoft.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: The 'cyware-logcollector' daemon monitors configured files and commands for new log messages.
       Specifically, these tests will check if the 'age' option work as expected, ignoring files that
       have not been modified for a time greater than the 'age' value using the current date.
       Log data collection is the real-time process of making sense out of the records generated by
       servers or devices. This component can receive logs through text files or Windows event logs.
       It can also directly receive logs via remote syslog which is useful for firewalls and
       other such devices.

components:
    - logcollector

suite: age

targets:
    - agent
    - manager

daemons:
    - cyware-logcollector

os_platform:
    - linux
    - windows

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - Debian Buster
    - Red Hat 8
    - Ubuntu Focal
    - Ubuntu Bionic
    - Windows 10
    - Windows Server 2019
    - Windows Server 2016

references:
    - https://documentation.cyware.khulnasoft.com/current/user-manual/capabilities/log-data-collection/index.html
    - https://documentation.cyware.khulnasoft.com/current/user-manual/reference/ossec-conf/localfile.html#age

tags:
    - logcollector_age
'''
import os
import tempfile

import pytest
import cyware_testing.logcollector as logcollector
from cyware_testing.tools import LOG_FILE_PATH
from cyware_testing.tools.configuration import load_cyware_configurations
from cyware_testing.tools.monitoring import FileMonitor
from cyware_testing.tools.time import time_to_seconds
from cyware_testing.tools.utils import lower_case_key_dictionary_array


# Marks
pytestmark = pytest.mark.tier(level=0)

# Configuration
test_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
configurations_path = os.path.join(test_data_path, 'cyware_age.yaml')

folder_path = os.path.join(tempfile.gettempdir(), 'cyware_testing_age')
folder_path_regex = os.path.join(folder_path, '*')

local_internal_options = {'logcollector.vcheck_files': 0, 'logcollector.debug': '2', 'windows.debug': '2'}


file_structure = [
    {
        'folder_path': folder_path,
        'filename': ['testing_file_40s.log'],
        'age': 40,
        'content': f'Content of testing_file_40s\n'
    },
    {
        'folder_path': folder_path,
        'filename': ['testing_file_5m.log'],
        'age': 300,
        'content': f'Content of testing_file_5m\n'
    },
    {
        'folder_path': folder_path,
        'filename': ['testing_file_3h.log'],
        'age': 10800,
        'content': f'Content of testing_file_3h\n'
    },
    {
        'folder_path': folder_path,
        'filename': ['testing_file_5d.log'],
        'age': 432000,
        'content': f'Content of testing_file_5d\n'
    },
    {
        'folder_path': folder_path,
        'filename': ['testing_file_300d.log'],
        'age': 25920000,
        'content': f'Content of testing_file_300d\n'
    },
]

parameters = [
    {'LOCATION': folder_path_regex, 'AGE': '4000s'},
    {'LOCATION': folder_path_regex, 'AGE': '5m'},
    {'LOCATION': folder_path_regex, 'AGE': '500m'},
    {'LOCATION': folder_path_regex, 'AGE': '9h'},
    {'LOCATION': folder_path_regex, 'AGE': '200d'},
]

metadata = lower_case_key_dictionary_array(parameters)

configurations = load_cyware_configurations(configurations_path, __name__, params=parameters, metadata=metadata)

configuration_ids = [f"{x['location']}_{x['age']}" for x in metadata]


@pytest.fixture(scope="module", params=configurations, ids=configuration_ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture(scope="function")
def get_files_list():
    """Get file list to create from the module."""
    return file_structure


@pytest.fixture(scope="module")
def get_local_internal_options():
    """Get local internal options from the module."""
    return local_internal_options


@pytest.mark.xfail(reason='Expected error. Issue https://github.com/cyware/cyware/issues/8438')
def test_configuration_age_basic(configure_local_internal_options_module, get_files_list,
                                 create_file_structure_function, get_configuration, configure_environment,
                                 file_monitoring, restart_logcollector):
    '''
    description: Check if the 'cyware-logcollector' daemon ignores the monitored files that have not been modified
                 for a time greater than the value set in the 'age' tag. For this purpose, the test will create a
                 folder with a testing log file to be monitored and configure different values for the 'age' option.
                 Once the logcollector has started, it will wait for the event that indicates that the log file is
                 being monitored, and depending on the 'age' value, check if the 'ignore' event is triggered or not.
                 Finally, the test will modify the logs and verify that 'read' events are generated from ignored
                 and not ignored files.

    cyware_min_version: 4.2.0

    tier: 0

    parameters:
        - configure_local_internal_options_module:
            type: fixture
            brief: Configure the Cyware local internal options file.
        - get_files_list:
            type: fixture
            brief: Get file list to create from the module.
        - create_file_structure_function:
            type: fixture
            brief: Create the specified file tree structure.
        - get_configuration:
            type: fixture
            brief: Get configurations from the module.
        - configure_environment:
            type: fixture
            brief: Configure a custom environment for testing.
        - file_monitoring:
            type: fixture
            brief: Handle the monitoring of a specified file.
        - restart_logcollector:
            type: fixture
            brief: Clear the 'ossec.log' file and start a new monitor.

    assertions:
        - Verify that the logcollector detects the testing log file to monitor.
        - Verify that the logcollector ignores the monitored files that have not been modified
          for a time greater than the 'age' value.
        - Verify that the logcollector does not ignore the monitored files that have been modified
          for a time greater than the 'age' value.

    input_description: A configuration template (test_age) is contained in an external YAML file (cyware_age.yaml),
                       which includes configuration settings for the 'cyware-logcollector' daemon and, it is
                       combined with the test cases (settings and files to monitor) defined in the module.

    expected_output:
        - r'New file that matches the .* pattern.*'
        - r'DEBUG: Ignoring file .* due to modification time'
        - r'DEBUG: Reading syslog message.*'
        - r'DEBUG: Read .* lines from.*'

    tags:
        - logs
    '''
    cfg = get_configuration['metadata']
    age_seconds = time_to_seconds(cfg['age'])

    for file in file_structure:
        for name in file['filename']:
            absolute_file_path = os.path.join(file['folder_path'], name)
            cyware_log_monitor = FileMonitor(LOG_FILE_PATH)

            log_callback = logcollector.callback_match_pattern_file(cfg['location'], absolute_file_path)
            cyware_log_monitor.start(timeout=10, callback=log_callback,
                                    error_message=f"{name} was not detected")

            if int(age_seconds) <= int(file['age']):
                log_callback = logcollector.callback_ignoring_file(
                    absolute_file_path)
                cyware_log_monitor.start(timeout=10, callback=log_callback,
                                        error_message=f"{name} was not ignored")

            else:
                with pytest.raises(TimeoutError):
                    log_callback = logcollector.callback_ignoring_file(absolute_file_path)
                    cyware_log_monitor.start(timeout=10, callback=log_callback,
                                            error_message=f"{name} was not ignored")

    for file in file_structure:
        for name in file['filename']:
            absolute_file_path = os.path.join(file['folder_path'], name)
            with open(absolute_file_path, 'a') as file_to_write:
                file_to_write.write(file['content'])

            log_callback = logcollector.callback_reading_syslog_message(file['content'][:-1])
            cyware_log_monitor.start(timeout=10, callback=log_callback,
                                    error_message=f"No syslog message received from {name}", update_position=False)
            log_callback = logcollector.callback_read_line_from_file(1, absolute_file_path)
            cyware_log_monitor.start(timeout=10, callback=log_callback,
                                    error_message=f"No lines read from {name}", update_position=False)
