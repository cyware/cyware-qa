'''
copyright: Copyright (C) 2015-2022, KhulnaSoft Ltd.

           Created by Cyware, Inc. <info@khulnasoft.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: The 'cyware-logcollector' daemon monitors configured files and commands for new log messages.
       Specifically, these tests will check if the logcollector keeps running once a monitored log
       is rotated or truncated. Log data collection is the real-time process of making sense out
       of the records generated by servers or devices. This component can receive logs through
       text files or Windows event logs. It can also directly receive logs via remote syslog
       which is useful for firewalls and other such devices.

components:
    - logcollector

suite: keep_running

targets:
    - agent
    - manager

daemons:
    - cyware-logcollector

os_platform:
    - linux
    - macos
    - solaris

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - Debian Buster
    - Red Hat 8
    - Solaris 10
    - Solaris 11
    - macOS Catalina
    - macOS Server
    - Ubuntu Focal
    - Ubuntu Bionic

references:
    - https://documentation.cyware.khulnasoft.com/current/user-manual/capabilities/log-data-collection/index.html
    - https://documentation.cyware.khulnasoft.com/current/user-manual/reference/ossec-conf/localfile.html

tags:
    - logcollector_keep_running
'''
import os
import tempfile

import pytest

import cyware_testing.logcollector as logcollector
from cyware_testing import global_parameters
from cyware_testing.tools import monitoring, file
from cyware_testing.tools.configuration import load_cyware_configurations
from cyware_testing.tools.monitoring import LOG_COLLECTOR_DETECTOR_PREFIX

# Marks
pytestmark = [pytest.mark.linux, pytest.mark.darwin, pytest.mark.sunos5, pytest.mark.tier(level=0)]

# Configuration
test_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
configurations_path = os.path.join(test_data_path, 'cyware_keep_running_conf.yaml')
temp_dir = tempfile.gettempdir()
log_test_path = os.path.join(temp_dir, 'cyware-testing', 'test_log.log')

local_internal_options = {'logcollector.vcheck_files': '5', 'logcollector.debug': '2'}

parameters = [
    {'LOG_FORMAT': 'syslog', 'LOCATION': log_test_path},
    {'LOG_FORMAT': 'syslog', 'LOCATION': log_test_path},
]
metadata = [
    {'log_format': 'syslog', 'location': log_test_path, 'mode': 'rotate',
     'log_line_before': "log test line: BEFORE ",
     'log_line_after': "log test line: AFTER "},
    {'log_format': 'syslog', 'location': log_test_path, 'mode': 'truncate',
     'log_line_before': "log test line: BEFORE ",
     'log_line_after': "log test line: AFTER "}
]

message_line = f"{metadata[0]['log_line_before']}{metadata[0]['mode']}"

file_structure = [
    {
        'folder_path': os.path.join(temp_dir, 'cyware-testing'),
        'filename': ['test_log.log'],
        'content': f"{metadata[0]['log_line_before']}{metadata[0]['mode']}",
        'size_kib': 10240
    }
]

configurations = load_cyware_configurations(configurations_path, __name__, params=parameters, metadata=metadata)
configuration_ids = [f"{x['mode']}_{x['location']}_in_{x['log_format']}_format" for x in metadata]


# Fixtures
@pytest.fixture(scope="module", params=configurations, ids=configuration_ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture(scope="module")
def get_files_list():
    """Get file list to create from the module."""
    return file_structure


def test_keep_running(configure_local_internal_options_module, get_configuration, file_monitoring,
                      configure_environment, create_file_structure_module, restart_logcollector):
    '''
    description: Check if the 'cyware-logcollector' daemon keeps running once a log is rotated or truncated.
                 For this purpose, the test will create a testing log file and configure a 'localfile' section
                 to monitor it. Then, it will verify that the log is monitored, add data to it, and verify
                 that the data addition is detected. After this, the test will rotate or truncate (depending
                 on the test case) the log file, and check if an event indicating that the inode of the monitored
                 log is changed has been generated (rotate), or an event indicating that the size of that log is
                 reduced (truncate). Finally, the test will add more data to the rotated/truncated log and verify
                 that event indicating the data addition is detected.

    cyware_min_version: 4.2.0

    tier: 0

    parameters:
        - configure_local_internal_options_module:
            type: fixture
            brief: Configure the Cyware local internal options.
        - get_configuration:
            type: fixture
            brief: Get configurations from the module.
        - file_monitoring:
            type: fixture
            brief: Handle the monitoring of a specified file.
        - configure_environment:
            type: fixture
            brief: Configure a custom environment for testing.
        - create_file_structure_module:
            type: fixture
            brief: Create the specified file tree structure.
        - restart_logcollector:
            type: fixture
            brief: Clear the 'ossec.log' file and start a new monitor.

    assertions:
        - Verify that the logcollector detects data addition on a monitored log file after and before
          of the log rotation/truncation..
        - Verify that the logcollector detects the log rotation by detecting changes on its inode.
        - Verify that the logcollector detects the log truncation by detecting changes in its size.

    input_description: A configuration template (test_keep_running) is contained in an external YAML file
                       (cyware_keep_running_conf.yaml). That template is combined with two test cases defined
                       in the module. Those include configuration settings for the 'cyware-logcollector' daemon.

    expected_output:
        - r'Analyzing file.*'
        - r'Reading syslog message'
        - r'File inode changed.' (when the monitored log file is rotated)
        - r'File size reduced.' (when the monitored log file is truncated)

    tags:
        - logs
    '''
    config = get_configuration['metadata']

    # Ensure that the file is being analyzed
    message = fr"INFO: \(\d*\): Analyzing file: '{config['location']}'."
    callback_message = monitoring.make_callback(pattern=message, prefix=LOG_COLLECTOR_DETECTOR_PREFIX)
    log_monitor.start(timeout=global_parameters.default_timeout,
                      error_message=logcollector.GENERIC_CALLBACK_ERROR_COMMAND_MONITORING,
                      callback=callback_message)

    # Add another MiB of data to log
    logcollector.add_log_data(log_path=config['location'],
                              log_line_message=f"{config['log_line_before']}{config['mode']}",
                              size_kib=1024)

    message = f"DEBUG: Reading syslog message: '{config['log_line_before']}{config['mode']}'"
    callback_message = monitoring.make_callback(pattern=message, prefix=LOG_COLLECTOR_DETECTOR_PREFIX)
    log_monitor.start(timeout=global_parameters.default_timeout,
                      error_message=logcollector.GENERIC_CALLBACK_ERROR_COMMAND_MONITORING,
                      callback=callback_message)

    if config['mode'] == 'rotate':
        file.remove_file(config['location'])
        file.write_file(config['location'], '')
        # Ensure that the rotation has been completed:
        message = f"DEBUG: File inode changed. {config['location']}"
        callback_message = monitoring.make_callback(pattern=message, prefix=LOG_COLLECTOR_DETECTOR_PREFIX)
        log_monitor.start(timeout=global_parameters.default_timeout,
                          error_message=logcollector.GENERIC_CALLBACK_ERROR_COMMAND_MONITORING,
                        callback=callback_message)
    else:
        file.truncate_file(config['location'])
        # Ensure that the truncate has been completed:
        message = f"DEBUG: File size reduced. {config['location']}"
        callback_message = monitoring.make_callback(pattern=message, prefix=LOG_COLLECTOR_DETECTOR_PREFIX)
        log_monitor.start(timeout=global_parameters.default_timeout,
                          error_message=logcollector.GENERIC_CALLBACK_ERROR_COMMAND_MONITORING,
                          callback=callback_message)

    # Add a MiB of data to rotated/truncated log
    logcollector.add_log_data(log_path=config['location'],
                              log_line_message=f"{config['log_line_after']}{config['mode']}",
                              size_kib=1024)

    message = f"DEBUG: Reading syslog message: '{config['log_line_after']}{config['mode']}'"
    callback_message = monitoring.make_callback(pattern=message, prefix=LOG_COLLECTOR_DETECTOR_PREFIX)
    log_monitor.start(timeout=global_parameters.default_timeout,
                      error_message=logcollector.GENERIC_CALLBACK_ERROR_COMMAND_MONITORING,
                      callback=callback_message)
