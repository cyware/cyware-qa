'''
copyright: Copyright (C) 2015-2022, KhulnaSoft Ltd.

           Created by Cyware, Inc. <info@khulnasoft.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: The 'cyware-logcollector' daemon monitors configured files and commands for new log messages.
       Specifically, these tests will check if the logcollector detects invalid values for
       the 'out_format' tag and the Cyware API returns the same values for the configured
       'localfile' section. Log data collection is the real-time process of making sense out
       of the records generated by servers or devices. This component can receive logs through
       text files or Windows event logs. It can also directly receive logs via remote syslog
       which is useful for firewalls and other such devices.

components:
    - logcollector

suite: configuration

targets:
    - agent
    - manager

daemons:
    - cyware-logcollector
    - cyware-apid

os_platform:
    - linux
    - windows

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - Debian Buster
    - Red Hat 8
    - Ubuntu Focal
    - Ubuntu Bionic
    - Windows 10
    - Windows Server 2019
    - Windows Server 2016

references:
    - https://documentation.cyware.khulnasoft.com/current/user-manual/capabilities/log-data-collection/index.html
    - https://documentation.cyware.khulnasoft.com/current/user-manual/reference/ossec-conf/localfile.html#out-format

tags:
    - logcollector_configuration
'''
import os
import pytest
import cyware_testing.api as api
import cyware_testing.logcollector as logcollector
from cyware_testing.tools.configuration import load_cyware_configurations
from cyware_testing.tools import get_service
from cyware_testing.tools.monitoring import LOG_COLLECTOR_DETECTOR_PREFIX, WINDOWS_AGENT_DETECTOR_PREFIX

import sys

# Marks
pytestmark = [pytest.mark.linux, pytest.mark.tier(level=0)]

# Configuration
no_restart_windows_after_configuration_set = True
test_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
configurations_path = os.path.join(test_data_path, 'cyware_basic_configuration.yaml')

cyware.khulnasoft.component = get_service()

local_internal_options = {'logcollector.debug': '2'}

parameters = [
    {'SOCKET_NAME': 'custom_socket', 'SOCKET_PATH': '/var/log/messages', 'LOCATION': "/tmp/testing.log",
     'LOG_FORMAT': 'syslog', 'TARGET': 'custom_socket', 'OUT_FORMAT': '$(timestamp %Y-%m-%d %H:%M:%S)',
     'TARGET_OUT_FORMAT': 'custom_socket'},
    {'SOCKET_NAME': 'custom_socket', 'SOCKET_PATH': '/var/log/messages', 'LOCATION': "/tmp/testing.log",
     'LOG_FORMAT': 'syslog', 'TARGET': 'custom_socket', 'OUT_FORMAT': '$(log)',
     'TARGET_OUT_FORMAT': 'custom_socket'},
    {'SOCKET_NAME': 'custom_socket', 'SOCKET_PATH': '/var/log/messages', 'LOCATION': "/tmp/testing.log",
     'LOG_FORMAT': 'syslog', 'TARGET': 'custom_socket', 'OUT_FORMAT': '$(base64_log)',
     'TARGET_OUT_FORMAT': 'custom_socket'},
    {'SOCKET_NAME': 'custom_socket', 'SOCKET_PATH': '/var/log/messages', 'LOCATION': "/tmp/testing.log",
     'LOG_FORMAT': 'syslog', 'TARGET': 'custom_socket', 'OUT_FORMAT': '$(json_escaped_log)',
     'TARGET_OUT_FORMAT': 'custom_socket'},
    {'SOCKET_NAME': 'custom_socket', 'SOCKET_PATH': '/var/log/messages', 'LOCATION': "/tmp/testing.log",
     'LOG_FORMAT': 'syslog', 'TARGET': 'custom_socket', 'OUT_FORMAT': '$(location)',
     'TARGET_OUT_FORMAT': 'custom_socket'},
    {'SOCKET_NAME': 'custom_socket', 'SOCKET_PATH': '/var/log/messages', 'LOCATION': "/tmp/testing.log",
     'LOG_FORMAT': 'syslog', 'TARGET': 'custom_socket', 'OUT_FORMAT': '$(output)',
     'TARGET_OUT_FORMAT': 'custom_socket'},
    {'SOCKET_NAME': 'custom_socket', 'SOCKET_PATH': '/var/log/messages', 'LOCATION': "/tmp/testing.log",
     'LOG_FORMAT': 'syslog', 'TARGET': 'custom_socket', 'OUT_FORMAT': '$(command)',
     'TARGET_OUT_FORMAT': 'custom_socket'},
    {'SOCKET_NAME': 'custom_socket', 'SOCKET_PATH': '/var/log/messages', 'LOCATION': "/tmp/testing.log",
     'LOG_FORMAT': 'syslog', 'TARGET': 'custom_socket', 'OUT_FORMAT': '$(timestamp)',
     'TARGET_OUT_FORMAT': 'custom_socket'},
    {'SOCKET_NAME': 'custom_socket', 'SOCKET_PATH': '/var/log/messages', 'LOCATION': "/tmp/testing.log",
     'LOG_FORMAT': 'syslog', 'TARGET': 'custom_socket', 'OUT_FORMAT': '$(hostname)',
     'TARGET_OUT_FORMAT': 'custom_socket'},
    {'SOCKET_NAME': 'custom_socket', 'SOCKET_PATH': '/var/log/messages', 'LOCATION': "/tmp/testing.log",
     'LOG_FORMAT': 'syslog', 'TARGET': 'custom_socket', 'OUT_FORMAT': '$(host_ip)',
     'TARGET_OUT_FORMAT': 'custom_socket'},
    {'SOCKET_NAME': 'custom_socket', 'SOCKET_PATH': '/var/log/messages', 'LOCATION': "/tmp/testing.log",
     'LOG_FORMAT': 'syslog', 'TARGET': 'custom_socket', 'OUT_FORMAT': '$(host_ip)',
     'TARGET_OUT_FORMAT': 'no_defined_custom_socket'},
]
metadata = [
    {'socket_name': 'custom_socket', 'socket_path': '/var/log/messages', 'location': "/tmp/testing.log",
     'log_format': 'syslog', 'target': 'custom_socket', 'out_format': '$(timestamp %Y-%m-%d %H:%M:%S)',
     'target_out_format': 'custom_socket', 'valid_value': True},
    {'socket_name': 'custom_socket', 'socket_path': '/var/log/messages', 'location': "/tmp/testing.log",
     'log_format': 'syslog', 'target': 'custom_socket', 'out_format': '$(log)',
     'target_out_format': 'custom_socket', 'valid_value': True},
    {'socket_name': 'custom_socket', 'socket_path': '/var/log/messages', 'location': "/tmp/testing.log",
     'log_format': 'syslog', 'target': 'custom_socket', 'out_format': '$(base64_log)',
     'target_out_format': 'custom_socket', 'valid_value': True},
    {'socket_name': 'custom_socket', 'socket_path': '/var/log/messages', 'location': "/tmp/testing.log",
     'log_format': 'syslog', 'target': 'custom_socket', 'out_format': '$(json_escaped_log)',
     'target_out_format': 'custom_socket', 'valid_value': True},
    {'socket_name': 'custom_socket', 'socket_path': '/var/log/messages', 'location': "/tmp/testing.log",
     'log_format': 'syslog', 'target': 'custom_socket', 'out_format': '$(location)',
     'target_out_format': 'custom_socket', 'valid_value': True},
    {'socket_name': 'custom_socket', 'socket_path': '/var/log/messages', 'location': "/tmp/testing.log",
     'log_format': 'syslog', 'target': 'custom_socket', 'out_format': '$(output)',
     'target_out_format': 'custom_socket', 'valid_value': True},
    {'socket_name': 'custom_socket', 'socket_path': '/var/log/messages', 'location': "/tmp/testing.log",
     'log_format': 'syslog', 'target': 'custom_socket', 'out_format': '$(command)',
     'target_out_format': 'custom_socket', 'valid_value': True},
    {'socket_name': 'custom_socket', 'socket_path': '/var/log/messages', 'location': "/tmp/testing.log",
     'log_format': 'syslog', 'target': 'custom_socket', 'out_format': '$(timestamp)',
     'target_out_format': 'custom_socket', 'valid_value': True},
    {'socket_name': 'custom_socket', 'socket_path': '/var/log/messages', 'location': "/tmp/testing.log",
     'log_format': 'syslog', 'target': 'custom_socket', 'out_format': '$(hostname)',
     'target_out_format': 'custom_socket', 'valid_value': True},
    {'socket_name': 'custom_socket', 'socket_path': '/var/log/messages', 'location': "/tmp/testing.log",
     'log_format': 'syslog', 'target': 'custom_socket', 'out_format': '$(host_ip)',
     'target_out_format': 'custom_socket', 'valid_value': True},
    {'socket_name': 'custom_socket', 'socket_path': '/var/log/messages', 'location': "/tmp/testing.log",
     'log_format': 'syslog', 'target': 'custom_socket', 'out_format': '$(host_ip)',
     'target_out_format': 'no_defined_custom_socket', 'valid_value': False},
]

configurations = load_cyware_configurations(configurations_path, __name__,
                                           params=parameters,
                                           metadata=metadata)
configuration_ids = [
    f"{x['log_format']}_{x['target']}_{x['socket_name']}_{x['location']}_{x['socket_path']}_"
    f"{x['target_out_format']}_{x['out_format']}" for x in metadata
]


def check_configuration_out_format_valid(cfg):
    """Check if the Cyware run correctly with the specified out format field.

    Ensure logcollector allows the specified out format attribute.

    Args:
        cfg (dict): Dictionary with the localfile configuration.

    Raises:
        TimeoutError: If the callback for the socket target is not generated.
        AssertError: In the case of a server instance, the API response is different than the real configuration.
    """
    log_callback = logcollector.callback_socket_target(cfg['location'], cfg['target'])
    cyware_log_monitor.start(timeout=5, callback=log_callback,
                            error_message=logcollector.GENERIC_CALLBACK_ERROR_TARGET_SOCKET)

    if cyware.khulnasoft.component == 'cyware-manager':
        real_configuration = dict((key, cfg[key]) for key in ('location', 'target', 'log_format'))
        real_configuration['out_format'] = {'target': cfg['target_out_format'], 'item': cfg['out_format']}
        api.wait_until_api_ready()
        api.compare_config_api_response([real_configuration], 'localfile')


def check_configuration_out_format_invalid(cfg):
    """Check if the Cyware fails because an invalid out format configuration value.

    Args:
        cfg (dict): Dictionary with the localfile configuration.

    Raises:
        TimeoutError: If the error callbacks are not generated.
    """
    log_callback = logcollector.callback_log_target_not_found(cfg['location'], cfg['target_out_format'])
    cyware_log_monitor.start(timeout=5, callback=log_callback,
                            error_message=logcollector.GENERIC_CALLBACK_ERROR_TARGET_SOCKET_NOT_FOUND)


# fixtures
@pytest.fixture(scope="module", params=configurations, ids=configuration_ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param

@pytest.mark.filterwarnings('ignore::urllib3.exceptions.InsecureRequestWarning')
def test_configuration_out_format(get_configuration, configure_environment, configure_local_internal_options_module,
                                  restart_logcollector):
    '''
    description: Check if the 'cyware-logcollector' daemon detects invalid settings for the 'out_format' tag.
                 For this purpose, the test will set a 'localfile' section using both valid and invalid values
                 for that tag. It also will set a 'socket' section to specify a custom socket. Finally, the
                 test will verify that the 'socket target' event is triggered when using a valid value or if
                 an error event is generated when using an invalid one.

    cyware_min_version: 4.2.0

    tier: 0

    parameters:
        - get_configuration:
            type: fixture
            brief: Get configurations from the module.
        - configure_environment:
            type: fixture
            brief: Configure a custom environment for testing.
        - configure_local_internal_options_module:
            type: fixture
            brief: Configure the Cyware local internal options file.
        - restart_logcollector:
            type: fixture
            brief: Clear the 'ossec.log' file and start a new monitor.

    assertions:
        - Verify that the logcollector generates error events when using invalid values
          for the 'out_format' tag.
        - Verify that the logcollector generates 'socket target' events when using valid values
          for the 'out_format' tag.
        - Verify that the Cyware API returns the same values for the 'localfile' section as the configured one.

    input_description: A configuration template (test_basic_configuration_out_format) is contained in an
                       external YAML file (cyware_basic_configuration.yaml). That template is combined with
                       different test cases defined in the module. Those include configuration settings
                       for the 'cyware-logcollector' daemon.

    expected_output:
        - r'DEBUG: Socket target for .* -> .*'
        - r'WARNING: Log target .* not found for the output format of localfile .*'

    tags:
        - invalid_settings
        - logs
    '''
    cfg = get_configuration['metadata']
    if cfg['valid_value']:
        check_configuration_out_format_valid(cfg)
    else:
        check_configuration_out_format_invalid(cfg)
