'''
copyright: Copyright (C) 2015-2022, KhulnaSoft Ltd.

           Created by Cyware, Inc. <info@khulnasoft.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: These tests will check if the `min_full_scan_interval` option of the Vulnerability Detector module
       is working correctly. This option is located in its corresponding section of the `ossec.conf` file
       and allows to define the minimum time before performing a full scan even if the feed was updated. The extended
       behavior also checks that the full scan is performed as expected.

components:
    - vulnerability_detector

suite: general_settings

targets:
    - manager

daemons:
    - cyware-modulesd

os_platform:
    - linux

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - Debian Buster
    - Red Hat 8
    - Ubuntu Focal
    - Ubuntu Bionic

references:
    - https://documentation.cyware.khulnasoft.com/current/user-manual/capabilities/vulnerability-detection/index.html
    - https://documentation.cyware.khulnasoft.com/current/user-manual/reference/ossec-conf/vuln-detector.html#min_full_scan_interval
    - https://github.com/cyware/cyware/issues/7749
    - https://github.com/cyware/cyware/issues/8727

tags:
    - settings
    - general_settings
'''
import os
import pytest

from cyware_testing.modules import vulnerability_detector as vd
from cyware_testing.tools.time import time_to_seconds
from cyware_testing.tools import configuration
from cyware_testing.modules.vulnerability_detector import event_monitor as evm
from cyware_testing.db_interface import cve_db, agent_db
from cyware_testing import LOG_FILE_PATH


pytestmark = [pytest.mark.server]

# Reference paths
TEST_DATA_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
CONFIGURATIONS_PATH = os.path.join(TEST_DATA_PATH, 'configuration_template')
TEST_CASES_PATH = os.path.join(TEST_DATA_PATH, 'test_cases')
TEST_FEEDS_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', 'data', 'feeds')

# Configuration and cases data
configurations_path = os.path.join(CONFIGURATIONS_PATH, 'configuration_min_full_scan_interval.yaml')
test_cases_path = os.path.join(TEST_CASES_PATH, 'cases_min_full_scan_interval.yaml')

# Custom feed paths
rhel_oval_feed_path = os.path.join(TEST_FEEDS_PATH, 'redhat', vd.CUSTOM_REDHAT_OVAL_FEED)
rhel_json_feed_path = os.path.join(TEST_FEEDS_PATH, 'redhat', vd.CUSTOM_REDHAT_JSON_FEED)
nvd_json_feed_path = os.path.join(TEST_FEEDS_PATH, 'nvd', vd.CUSTOM_NVD_FEED)

# Test configurations
configuration_parameters, configuration_metadata, test_case_ids = configuration.get_test_cases_data(test_cases_path)
configurations = configuration.load_configuration_template(configurations_path, configuration_parameters,
                                                           configuration_metadata)

# Set offline custom feeds configuration
to_modify = ['RHEL_FEED_PATH', 'RHEL_JSON_FEED_PATH', 'NVD_JSON_FEED_PATH']
new_values = [rhel_oval_feed_path, rhel_json_feed_path, nvd_json_feed_path]
configurations = configuration.update_configuration_template(configurations, to_modify, new_values)


@pytest.fixture(scope='function')
def prepare_full_scan_environment(mock_agent_function, mock_agent_packages):
    """Add a mocked agent with mocked packages and force the full scan for that agent.

    Args:
        mock_agent_function (Fixture): Fixture for mocking an agent.
        mock_agent_packages (Fixture): Add mocked packages for mocked agent.
    """
    # Force sync status for packages
    agent_db.update_sync_info(agent_id=mock_agent_function, component="syscollector-packages")

    # Force the full scan
    agent_db.update_last_full_scan(1, agent_id=mock_agent_function)

    yield mock_agent_function


@pytest.mark.tier(level=0)
@pytest.mark.parametrize('configuration, metadata', zip(configurations, configuration_metadata), ids=test_case_ids)
def test_min_full_scan_interval(configuration, metadata, set_cyware_configuration_vdt, truncate_monitored_files,
                                clean_cve_tables_func, prepare_full_scan_environment, setup_log_monitor,
                                restart_modulesd_function):
    '''
    description: Check that the full scan is started after passing the min_full_scan_interval time.

    test_phases:
        - Mock an agent with packages.
        - Update sync info a force the full scan.
        - Set a custom Cyware configuration.
        - Restart cyware-modulesd.
        - Check the full scan event log
        - Clean NVD tables and import again the feed (simulate NVD feed update to force full scan)
        - Check again the full scan event log.

    cyware_min_version: 4.3.0

    tier: 0

    parameters:
        - configuration:
            type: dict
            brief: Configuration loaded from `configuration_template`.
        - metadata:
            type: dict
            brief: Test case metadata.
        - set_cyware_configuration_vdt:
            type: fixture
            brief: Set cyware configuration.
        - truncate_monitored_files:
            type: fixture
            brief: Truncate all the log files and json alerts files before and after the test execution.
        - prepare_environment:
            type: fixture
            brief: Setup the initial test state.
        - setup_log_monitor:
            type: fixture
            brief: Create the log monitor.
        - restart_modulesd_function:
            type: fixture
            brief: Restart cyware-modulesd daemon before starting a test, and stop it after finishing.

    assertions:
        - Verify that the full scan starts.
        - Verify that the full scan ends.

    input_description: The values specified in `data/test_cases`.

    expected_output:
        - f"A full scan will be run on agent '001'"
        - f"Finished vulnerability assessment for agent '001'"
    '''
    agent_id = prepare_full_scan_environment
    log_monitor = setup_log_monitor
    event_timeout = time_to_seconds(metadata['min_full_scan_interval_value']) + vd.T_40

    # Wait for full scan event log
    evm.check_vulnerability_full_scan_start(log_monitor=log_monitor, timeout=event_timeout, agent_id=agent_id)

    # Wait for full scan event log completion
    evm.check_vulnerability_full_scan_end(log_monitor=log_monitor, agent_id=agent_id)

    # Clean NVD tables to force a full scan again after updating the NVD feed and passed the min_full_scan_intervall
    cve_db.clean_nvd_tables()

    # Check again the full scan event
    evm.check_vulnerability_full_scan_start(log_monitor=log_monitor, timeout=event_timeout, agent_id=agent_id)
