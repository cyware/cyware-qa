'''
copyright: Copyright (C) 2015-2021, KhulnaSoft Ltd.

           Created by Cyware, Inc. <info@khulnasoft.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: These tests will check if the `min_full_scan_interval` option of the Vulnerability Detector module
       is working correctly. This option is located in its corresponding section of the `ossec.conf` file
       and allows to define the minimum time before performing a full scan even if the feed was updated. The extended
       behavior also checks that the full scan is performed as expected.

components:
    - vulnerability_detector

suite: general_settings

targets:
    - manager

daemons:
    - cyware-modulesd

os_platform:
    - linux

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - CentOS 6
    - Ubuntu Focal
    - Ubuntu Bionic
    - Ubuntu Xenial
    - Ubuntu Trusty
    - Debian Buster
    - Debian Bullseye
    - Debian Bookworm
    - Red Hat 8
    - Red Hat 7
    - Red Hat 6

references:
    - https://documentation.cyware.khulnasoft.com/current/user-manual/capabilities/vulnerability-detection/index.html
    - https://documentation.cyware.khulnasoft.com/current/user-manual/reference/ossec-conf/vuln-detector.html#min_full_scan_interval
    - https://github.com/cyware/cyware/issues/7749
    - https://github.com/cyware/cyware/issues/8727

tags:
    - settings
    - general_settings
'''
import os
import pytest

from cyware_testing.tools.configuration import load_configuration_template, get_test_cases_data
from cyware_testing.db_interface import agent_db
from cyware_testing.tools.time import time_to_seconds
from cyware_testing.tools.configuration import update_configuration_template
from cyware_testing import mocking
from cyware_testing.modules import vulnerability_detector as vd
from cyware_testing.modules.vulnerability_detector import event_monitor as evm


pytestmark = [pytest.mark.server]

# Reference paths
TEST_DATA_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
CONFIGURATIONS_PATH = os.path.join(TEST_DATA_PATH, 'configuration_template')
TEST_CASES_PATH = os.path.join(TEST_DATA_PATH, 'test_cases')
TEST_FEEDS_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', 'data', 'feeds')

# Configuration and cases data
configurations_path = os.path.join(CONFIGURATIONS_PATH, 'configuration_retry_interval.yaml')
test_cases_path = os.path.join(TEST_CASES_PATH, 'cases_retry_interval.yaml')

# Test configurations
configuration_parameters, configuration_metadata, test_case_ids = get_test_cases_data(test_cases_path)
configurations = load_configuration_template(configurations_path, configuration_parameters, configuration_metadata)

# Offline feeds
custom_rhel_oval_feed_path = os.path.join(TEST_FEEDS_PATH, 'redhat', vd.CUSTOM_REDHAT_OVAL_FEED)
custom_rhel_json_feed_path = os.path.join(TEST_FEEDS_PATH, 'redhat', vd.CUSTOM_REDHAT_JSON_FEED)
custom_nvd_json_feed_path = os.path.join(TEST_FEEDS_PATH, 'nvd', vd.CUSTOM_NVD_FEED)

# Add the custom feeds path in configurations
tags_to_replace = ['CUSTOM_RHEL_OVAL_FEED_PATH', 'CUSTOM_RHEL_JSON_FEED_PATH', 'CUSTOM_NVD_JSON_FEED_PATH']
new_tags_values = [custom_rhel_oval_feed_path, custom_rhel_json_feed_path, custom_nvd_json_feed_path]
configurations = update_configuration_template(configurations, tags_to_replace, new_tags_values)


@pytest.mark.tier(level=0)
@pytest.mark.parametrize('configuration, metadata', zip(configurations, configuration_metadata), ids=test_case_ids)
def test_retry_interval(configuration, metadata, set_cyware_configuration_vdt, truncate_monitored_files,
                        clean_cve_tables_func, mock_agent_function, mock_agent_packages, restart_modulesd_function):
    '''
    description: Check if the `retry_interval ` option is working correctly. To do this,
                 it checks the `ossec.log` file for the message indicating that Vulnerability Detector will sleep before
                 attempting to scan the pending agents (forcing the retry interval action). After this, the DBs are
                 synchronized and the scan (log) is checked to ensure that it is performed normally.

    test_phases:
        - Set a custom Cyware configuration.
        - Mock an agent with packages.
        - Restart cyware-modulesd.
        - Delete one package from the agent to avoid checksum sync validation.
        - Update the sync_info data to force the retry interval scan.
        - Check the retry interval event in log.
        - Add again the package and update the sync_info data to force the retry interval scan.
        - Search analyzing OVAL vulnerabilities event (scan is running successfully).

    cyware_min_version: 4.3.0

    tier: 0

    parameters:
        - configuration:
            type: dict
            brief: Cyware configuration data. Needed for set_cyware_configuration fixture.
        - metadata:
            type: dict
            brief: Cyware configuration metadata.
        - set_cyware_configuration_vdt:
            type: fixture
            brief: Set the cyware configuration according to the configuration data.
        - truncate_monitored_files:
            type: fixture
            brief: Truncate the log files at the end of the testing case.
        - clean_cve_tables_func:
            type: fixture
            brief: Clean all the CVE tables before and after running the test.
        - mock_agent_function:
            type: fixture
            brief: Create a mocked agent with specific system. Needed to force the scan according to the inserted feeds.
        - mock_agent_packages:
            type: fixture
            brief: Add a mocked packages in the agent DB.
        - restart_modulesd_function:
            type: fixture
            brief: Restart the cyware-modulesd daemon.

    assertions:
        - If the retry interval message is showed.
        - If the scan occurs after the second retry.

    input_description:
        - The `test_retry_interval.yaml` file provides the module configuration for this test.

    expected_output:
        - 'Going to sleep \\d+ seconds before retrying pending agents'
        - f"Analyzing OVAL vulnerabilities for agent '{agent_id}'"
    '''
    # Delete one package from the agent to avoid checksum sync validation
    agent_db.delete_package(package=mock_agent_packages[0], agent_id=mock_agent_function)

    # Update the sync_info data to force the retry interval scan
    agent_db.update_sync_info(last_completion=1, last_attempt=2, agent_id=mock_agent_function)

    # Check the retry interval event in log
    evm.check_retry_interval_log(time_to_seconds(metadata['retry_interval']))

    # Add again the package
    mocking.insert_mocked_packages(num_packages=1, agent_id=mock_agent_function)

    # Update the sync_info data to force the retry interval scan
    agent_db.update_sync_info(last_completion=2, last_attempt=2, agent_id=mock_agent_function)

    # Search analyzing OVAL vulnerabilities event
    evm.check_analyzing_oval_vulnerabilities_log(agent_id=mock_agent_function)


@pytest.mark.tier(level=0)
@pytest.mark.parametrize('configuration, metadata', zip(configurations, configuration_metadata), ids=test_case_ids)
def test_retry_interval_max_retries(configuration, metadata, set_cyware_configuration_vdt, truncate_monitored_files,
                                    clean_cve_tables_func, mock_agent_function, mock_agent_packages,
                                    restart_modulesd_function):
    '''
    description: Check if after exceeding the maximum number of retries for a scan (`retry_interval`) the
                 corresponding message is displayed indicating that the software could not be obtained for the agent
                 and that it will be retried at the next scan (waiting for its time interval).

    test_phases:
        - Set a custom Cyware configuration.
        - Mock an agent with packages.
        - Restart cyware-modulesd.
        - Delete one package from the agent to avoid checksum sync validation.
        - Update the sync_info data to force the retry interval scan.
        - Wait for all retries interval events (4 times).
        - Check the event: could not obtain software for that agent.

    cyware_min_version: 4.3.0

    tier: 0

    parameters:
        - configuration:
            type: dict
            brief: Cyware configuration data. Needed for set_cyware_configuration fixture.
        - metadata:
            type: dict
            brief: Cyware configuration metadata.
        - set_cyware_configuration_vdt:
            type: fixture
            brief: Set the cyware configuration according to the configuration data.
        - truncate_monitored_files:
            type: fixture
            brief: Truncate the log files at the end of the testing case.
        - clean_cve_tables_func:
            type: fixture
            brief: Clean all the CVE tables before and after running the test.
        - mock_agent_function:
            type: fixture
            brief: Create a mocked agent with specific system. Needed to force the scan according to the inserted feeds.
        - mock_agent_packages:
            type: fixture
            brief: Add a mocked packages in the agent DB.
        - restart_modulesd_function:
            type: fixture
            brief: Restart the cyware-modulesd daemon.

    assertions:
        - If the retry interval messages are showed (4 times).
        - If the message is displayed indicating failure to obtain the agent software, and that it will wait for the
          next scan.

    input_description:
        - The `test_retry_interval.yaml` file provides the module configuration for this test.

    expected_output:
        - 'Going to sleep \\d+ seconds before retrying pending agents'
        - f"The software of the agent '{agent_id}' could not be obtained after {num_attemps} attempts. Skipping agent
          until the next scan."
    '''
    # Delete one package from the agent to avoid checksum sync validation
    agent_db.delete_package(package=mock_agent_packages[0], agent_id=mock_agent_function)

    # Update the sync_info data to force the retry interval scan
    agent_db.update_sync_info(last_completion=1, last_attempt=2, agent_id=mock_agent_function)

    # Check the retry interval event in log
    evm.check_retry_interval_log(time_to_seconds(metadata['retry_interval']), num_expected_events=4)

    # Check the event: could not obtain software for that agent
    evm.check_obtaining_software_failure_log(agent_id=mock_agent_function)
