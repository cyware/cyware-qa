'''
copyright: Copyright (C) 2015-2022, KhulnaSoft Ltd.

           Created by Cyware, Inc. <info@khulnasoft.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: These tests will check if the `run_on_start` option of the Vulnerability Detector module
       is working correctly. This option is located in its corresponding section of the `ossec.conf` file
       and allows to define if Vulnerability Detector must run a scan as soon as it is started.

components:
    - vulnerability_detector

suite: general_settings

targets:
    - manager

daemons:
    - cyware-modulesd
    - cyware-db

os_platform:
    - linux

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - Debian Buster
    - Red Hat 8
    - Ubuntu Focal
    - Ubuntu Bionic

references:
    - https://documentation.cyware.khulnasoft.com/current/user-manual/capabilities/vulnerability-detection/index.html

tags:
    - vulnerability_detector
    - basic_configuration
'''
import os
import pytest

from cyware_testing.tools.configuration import load_configuration_template, get_test_cases_data
from cyware_testing.tools.configuration import update_configuration_template
from cyware_testing.modules.vulnerability_detector import event_monitor as evm
from cyware_testing.modules import vulnerability_detector as vd


pytestmark = [pytest.mark.server]

# Reference paths
TEST_DATA_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
CONFIGURATIONS_PATH = os.path.join(TEST_DATA_PATH, 'configuration_template')
TEST_CASES_PATH = os.path.join(TEST_DATA_PATH, 'test_cases')
TEST_FEEDS_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', 'data', 'feeds')

# Configuration and cases data
configurations_path = os.path.join(CONFIGURATIONS_PATH, 'configuration_run_on_start.yaml')
t1_cases_path = os.path.join(TEST_CASES_PATH, 'cases_run_on_start_enabled.yaml')
t2_cases_path = os.path.join(TEST_CASES_PATH, 'cases_run_on_start_disabled.yaml')

# Custom paths
custom_nvd_json_feed_path = os.path.join(TEST_FEEDS_PATH, 'nvd', vd.CUSTOM_NVD_FEED)

# Enabled configurations (t1)
t1_configuration_parameters, t1_configuration_metadata, t1_case_ids = get_test_cases_data(t1_cases_path)
t1_configurations = load_configuration_template(configurations_path, t1_configuration_parameters,
                                                t1_configuration_metadata)

# Disabled configurations (t2)
t2_configuration_parameters, t2_configuration_metadata, t2_case_ids = get_test_cases_data(t2_cases_path)
t2_configurations = load_configuration_template(configurations_path, t2_configuration_parameters,
                                                t2_configuration_metadata)

# Set offline custom feeds configuration
t1_configurations = update_configuration_template(t1_configurations, ['CUSTOM_NVD_JSON_FEED_PATH'],
                                                  [custom_nvd_json_feed_path])
t2_configurations = update_configuration_template(t2_configurations, ['CUSTOM_NVD_JSON_FEED_PATH'],
                                                  [custom_nvd_json_feed_path])


@pytest.mark.tier(level=0)
@pytest.mark.parametrize('configuration', t1_configurations, ids=t1_case_ids)
def test_run_on_start_enabled(configuration, set_cyware_configuration_vdt, truncate_monitored_files,
                              clean_cve_tables_func, restart_modulesd_function):
    '''
    description: Check that when run_on_start is enabled, the vulnerability scan starts (indicated in the log).

    test_phases:
        - Set a custom Cyware configuration.
        - Restart cyware-modulesd.
        - Check that the vulnerability scan is started.

    cyware_min_version: 4.2.0

    tier: 0

    parameters:
        - configuration:
            type: dict
            brief: Configuration loaded from `configuration_template`.
        - set_cyware_configuration_vdt:
            type: fixture
            brief: Set cyware configuration.
        - truncate_monitored_files:
            type: fixture
            brief: Truncate all the log files and json alerts files before and after the test execution.
        - clean_cve_tables_func:
            type: fixture
            brief: Clean all CVE tables.
        - restart_modulesd_function:
            type: fixture
            brief: Restart cyware-modulesd daemon before starting a test, and stop it after finishing.

    assertions:
        - Vulnerability Scan start log appears

    input_description:
        - The `configuration_run_on_start.yaml` file provides the module configuration for this test.
        - The `cases_run_on_start_enabled.yaml` file provides the test cases.

    expected_output:
        - 'Starting vulnerability scan'
    '''
    evm.check_vulnerability_scan_start()


@pytest.mark.tier(level=0)
@pytest.mark.parametrize('configuration', t2_configurations, ids=t2_case_ids)
def test_run_on_start_disabled(configuration, set_cyware_configuration_vdt, truncate_monitored_files,
                               clean_cve_tables_func, restart_modulesd_function):
    '''
    description: Check that when run_on_start is disabled, the vulnerability scan does not start (log does not appear).

    test_phases:
        - Set a custom Cyware configuration.
        - Restart cyware-modulesd.
        - Check that the vulnerability scan is started event does not appear.

    cyware_min_version: 4.2.0

    tier: 0

    parameters:
        - configuration:
            type: dict
            brief: Configuration loaded from `configuration_template`.
        - set_cyware_configuration_vdt:
            type: fixture
            brief: Set cyware configuration.
        - truncate_monitored_files:
            type: fixture
            brief: Truncate all the log files and json alerts files before and after the test execution.
        - clean_cve_tables_func:
            type: fixture
            brief: Clean all CVE tables.
        - restart_modulesd_function:
            type: fixture
            brief: Restart cyware-modulesd daemon before starting a test, and stop it after finishing.

    assertions:
        - Vulnerability Scan start log does not appear

    input_description:
        - The `configuration_run_on_start.yaml` file provides the module configuration for this test.
        - The `cases_run_on_start_disabled.yaml` file provides the test cases.

    expected_output:
        - 'NOT Starting vulnerability scan'
    '''
    with pytest.raises(TimeoutError):
        evm.check_vulnerability_scan_start()
        raise AssertionError('Found starting scan log when run on start is disabled')
