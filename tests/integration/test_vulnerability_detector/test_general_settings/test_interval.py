'''
copyright: Copyright (C) 2015-2022, KhulnaSoft Ltd.

           Created by Cyware, Inc. <info@khulnasoft.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: These tests will check if the `interval` option of the Vulnerability Detector module
       is working correctly. This option is located in its corresponding section of
       the `ossec.conf` file and allows to define the time between scans.

components:
    - vulnerability_detector

suite: general_settings

targets:
    - manager

daemons:
    - cyware-modulesd

os_platform:
    - linux

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - Debian Buster
    - Red Hat 8
    - Ubuntu Focal
    - Ubuntu Bionic

references:
    - https://documentation.cyware.khulnasoft.com/current/user-manual/capabilities/vulnerability-detection/index.html
    - https://documentation.cyware.khulnasoft.com/current/user-manual/reference/ossec-conf/vuln-detector.html#interval

tags:
    - general_settings
    - vulnerability_detector
'''
import os
import pytest

from cyware_testing import ALERTS_JSON_PATH
from cyware_testing.tools.configuration import load_configuration_template, get_test_cases_data
from cyware_testing.tools.configuration import update_configuration_template
from cyware_testing.db_interface import agent_db
from cyware_testing.modules.vulnerability_detector import event_monitor as evm
from cyware_testing.modules import vulnerability_detector as vd


pytestmark = [pytest.mark.server]

# Reference paths
TEST_DATA_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
CONFIGURATIONS_PATH = os.path.join(TEST_DATA_PATH, 'configuration_template')
TEST_CASES_PATH = os.path.join(TEST_DATA_PATH, 'test_cases')

# Configuration and cases data
configurations_path = os.path.join(CONFIGURATIONS_PATH, 'configuration_interval.yaml')
cases_path = os.path.join(TEST_CASES_PATH, 'cases_interval.yaml')

# test_interval_scan configurations
configuration_parameters, configuration_metadata, case_ids = get_test_cases_data(cases_path)
configurations = load_configuration_template(configurations_path, configuration_parameters,
                                             configuration_metadata)


@pytest.mark.tier(level=0)
@pytest.mark.parametrize('configuration, metadata', zip(configurations, configuration_metadata), ids=case_ids)
def test_interval_scan(configuration, metadata, set_cyware_configuration_vdt, truncate_monitored_files,
                       clean_cve_tables_module, restart_modulesd_function):
    '''
    description: Check that the time specified in the interval is correct at the time of sleeping the scan thread.

    test_phases:
        - Set a custom Cyware configuration.
        - Restart cyware-modulesd.
        - Check in log that the scan sleeping time is the expected one.

    cyware_min_version: 4.2.0

    tier: 0

    parameters:
        - configuration:
            type: dict
            brief: Configuration loaded from `configuration_template`.
        - metadata:
            type: dict
            brief: Test case metadata.
        - set_cyware_configuration_vdt:
            type: fixture
            brief: Set cyware configuration.
        - truncate_monitored_files:
            type: fixture
            brief: Truncate all the log files and json alerts files before and after the test execution.
        - clean_cve_tables_module:
            type: fixture
            brief: Clean all CVE tables.
        - restart_modulesd_function:
            type: fixture
            brief: Restart cyware-modulesd daemon before starting a test, and stop it after finishing.

    assertions:
        - Check that the scan sleeping time is the expected one.

    input_description:
        - The `configuration_interval.yaml` file provides the module configuration for this test.
        - The `cases_interval` file provides the test cases.

    expected_output:
        - f".*wm_vuldet_run_sleep.*Sleeping for {num_seconds} seconds..."
    '''
    evm.check_scan_time_interval(seconds_number=metadata['expected_seconds'])
