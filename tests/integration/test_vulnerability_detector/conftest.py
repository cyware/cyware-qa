# Copyright (C) 2015-2021, KhulnaSoft Ltd.
# Created by Cyware, Inc. <info@khulnasoft.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2
import pytest

from subprocess import CalledProcessError

from cyware_testing.tools.services import control_service
from cyware_testing.tools import configuration
from cyware_testing.db_interface import cve_db, agent_db
from cyware_testing.tools.time import get_current_timestamp
from cyware_testing.modules import vulnerability_detector as vd


@pytest.fixture(scope='module')
def clean_vuln_tables(request):
    """Clean vulnerabilities tables """
    agent_db.clean_sys_programs()
    cve_db.clean_all_cve_tables()

    yield

    agent_db.clean_sys_programs()
    cve_db.clean_all_cve_tables()


@pytest.fixture
def restart_modulesd_catching_ossec_conf_error(request):
    """Restart cyware-modulesd ignoring the process error"""
    control_service('stop', daemon='cyware-modulesd')
    try:
        control_service('start', daemon='cyware-modulesd')
    except (ValueError, CalledProcessError):
        pass


@pytest.fixture(scope='function')
def restart_modulesd_function():
    """Restart cyware-modulesd daemon before starting a test, and stop it after finishing"""
    control_service('restart', daemon='cyware-modulesd')
    yield
    control_service('stop', daemon='cyware-modulesd')


@pytest.fixture(scope='function')
def clean_cve_tables_func():
    """Clean all tables of the CVE database before and after finishing the test"""
    cve_db.clean_all_cve_tables()
    yield
    cve_db.clean_all_cve_tables()


@pytest.fixture(scope='module')
def clean_cve_tables_module():
    """Clean all tables of the CVE database before and after finishing the tests module"""
    cve_db.clean_all_cve_tables()
    yield
    cve_db.clean_all_cve_tables()


@pytest.fixture(scope='function')
def prepare_baseline_scan_with_vuln_packages(mock_agent_function):
    """Add a mocked agent with mocked packages and force the baseline scan for that agent.

    Args:
        mock_agent_function (Fixture): Fixture for mocking an agent.
    """
    # Insert vulnerable packages
    vd.insert_vulnerable_packages(agent_id=mock_agent_function)

    # Force sync status for packages
    agent_db.update_sync_info(agent_id=mock_agent_function, component="syscollector-packages")

    # Force the baseline scan
    agent_db.update_last_full_scan(0, agent_id=mock_agent_function)

    yield mock_agent_function


@pytest.fixture(scope='function')
def prepare_full_scan(agent_system, mock_agent_with_custom_system):
    """Prepare the environment to launch the vulnerability scan.

    - Mock an agent with a specified system.
    - Force full scan.

    Args:
        agent_system (str): System to set to the mocked agent.
        mock_agent_with_custom_system (fixture): Mock an agent with a custom system.
    """
    agent_db.update_last_full_scan(1, agent_id=mock_agent_with_custom_system)

    yield mock_agent_with_custom_system


@pytest.fixture(scope='function')
def prepare_full_scan_with_vuln_packages(mock_agent_function):
    """Add a mocked agent with mocked packages and force the full scan for that agent.

    Args:
        mock_agent_function (Fixture): Fixture for mocking an agent.
    """
    # Insert vulnerable packages
    vd.insert_vulnerable_packages(agent_id=mock_agent_function)

    # Force sync status for packages
    agent_db.update_sync_info(agent_id=mock_agent_function, component="syscollector-packages")

    # Force the full scan
    agent_db.update_last_full_scan(1, agent_id=mock_agent_function)

    yield mock_agent_function


@pytest.fixture(scope='function')
def prepare_full_scan_with_vuln_packages_and_custom_system(agent_system, mock_agent_with_custom_system):
    """Prepare the environment to launch the vulnerability scan.

    - Mock an agent with a specified system.
    - Insert mocked vulnerables packages.
    - Update packages sync status.
    - Force full scan.

    Args:
        agent_system (str): System to set to the mocked agent.
        mock_agent_with_custom_system (fixture): Mock an agent with a custom system.
    """
    # Insert vulnerable packages
    package_vendor = 'Red Hat, Inc.' if 'RHEL' in agent_system else 'cyware-mocking'

    if 'SLES' in agent_system:
        package_vendor = 'SUSE LLC <https://www.suse.com/>'
        vd.insert_suse_system_package(agent_id=mock_agent_with_custom_system, version=agent_system)

    vd.insert_vulnerable_packages(agent_id=mock_agent_with_custom_system, vendor=package_vendor)

    # Update sync info for packages
    agent_db.update_sync_info(agent_id=mock_agent_with_custom_system, component="syscollector-packages")

    # Forcing a full-scan
    agent_db.update_last_full_scan(1, agent_id=mock_agent_with_custom_system)

    yield mock_agent_with_custom_system


@pytest.fixture(scope='function')
def prepare_full_scan_with_vuln_package(mock_agent_function):
    """Add a mocked agent with only a mocked vulnerable package and force the full scan for that agent.

    Args:
        mock_agent_function (Fixture): Fixture for mocking an agent.
    """
    # Insert vulnerable packages
    vd.insert_vulnerable_packages(agent_id=mock_agent_function, count=1)

    # Force sync status for packages
    agent_db.update_sync_info(agent_id=mock_agent_function, component="syscollector-packages")

    # Force the full scan
    agent_db.update_last_full_scan(1, agent_id=mock_agent_function)

    yield mock_agent_function


@pytest.fixture(scope='function')
def prepare_full_scan_with_obsolete_vulnerabilities(mock_agent_function):
    """Add a mocked agent with mocked packages and force the full scan for that agent.

    Args:
        mock_agent_function (Fixture): Fixture for mocking an agent.
    """
    # Insert vulnerability data in vulnerabilities inventory
    vd.insert_vulnerabilities_agent_inventory(agent_id=mock_agent_function, status='OBSOLETE')

    # Force sync status for packages
    agent_db.update_sync_info(agent_id=mock_agent_function, component="syscollector-packages")

    # Force the full scan
    agent_db.update_last_full_scan(1, agent_id=mock_agent_function)

    yield mock_agent_function


@pytest.fixture(scope='function')
def prepare_partial_scan_with_vuln_packages(mock_agent_function):
    """Add a mocked agent with mocked packages and force the partial scan for that agent.

    Args:
        mock_agent_function (Fixture): Fixture for mocking an agent.
    """
    # Insert vulnerable packages
    vd.insert_vulnerable_packages(agent_id=mock_agent_function)

    # Force sync status for packages
    agent_db.update_sync_info(agent_id=mock_agent_function, component="syscollector-packages")

    # Force the partial scan
    agent_db.update_last_full_scan(int(get_current_timestamp()), agent_id=mock_agent_function)

    yield mock_agent_function


@pytest.fixture(scope='function')
def prepare_partial_scan_with_vuln_package(mock_agent_function):
    """Add a mocked agent with only a mocked vulnerable package and force the partial scan for that agent.

    Args:
        mock_agent_function (Fixture): Fixture for mocking an agent.
    """
    # Insert vulnerable packages
    vd.insert_vulnerable_packages(agent_id=mock_agent_function, count=1)

    # Force sync status for packages
    agent_db.update_sync_info(agent_id=mock_agent_function, component="syscollector-packages")

    # Force the partial scan
    agent_db.update_last_full_scan(int(get_current_timestamp()), agent_id=mock_agent_function)

    yield mock_agent_function


@pytest.fixture(scope='function')
def prepare_partial_scan_with_obsolete_vulnerabilities(mock_agent_function):
    """Add a mocked agent with mocked packages and force the partial scan for that agent.

    Args:
        mock_agent_function (Fixture): Fixture for mocking an agent.
    """
    # Insert vulnerability data in vulnerabilities inventory
    vd.insert_vulnerabilities_agent_inventory(agent_id=mock_agent_function, status='OBSOLETE')

    # Force sync status for packages
    agent_db.update_sync_info(agent_id=mock_agent_function, component="syscollector-packages")

    # Force the partial scan
    agent_db.update_last_full_scan(int(get_current_timestamp()), agent_id=mock_agent_function)

    yield mock_agent_function


@pytest.fixture(scope='session')
def configure_local_internal_options_vdt():
    """Fixture to configure the local internal options file."""
    # Define local internal options for vulnerability detector tests
    local_internal_options = {'cyware_modules.debug': '2', 'monitord.rotate_log': '0'}

    # Backup the old local internal options
    backup_local_internal_options = configuration.get_cyware_local_internal_options()

    # Set the new local internal options configuration
    configuration.set_cyware_local_internal_options(configuration.create_local_internal_options(local_internal_options))

    yield

    # Backup the old local internal options cofiguration
    configuration.set_cyware_local_internal_options(backup_local_internal_options)


@pytest.fixture(scope='function')
def set_cyware_configuration_vdt(configuration, set_cyware_configuration, configure_local_internal_options_vdt):
    """Set cyware configuration

    Args:
        configuration (dict): Configuration template data to write in the ossec.conf.
        set_cyware_configuration (fixture): Set the cyware configuration according to the configuration data.
        configure_local_internal_options_vdt (fixture): Set the local_internal_options.conf file.
    """
    yield
