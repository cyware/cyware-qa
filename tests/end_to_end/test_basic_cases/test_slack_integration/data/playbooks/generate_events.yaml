- name: Generate events
  hosts: manager
  vars:
    integrations_log: /var/ossec/logs/integrations.log
    slack_messages_log: /tmp/slack_messages.log
  become: true
  tasks:

    - name: Truncate integrations log
      shell: echo "" > {{ integrations_log }}

    - name: Attempt a brute force SSH attack
      expect:
        command: ssh {{ item }}@localhost
        timeout: 5
        responses:
          (.*)continue connecting(.*): 'yes'
          (?i)password: invalid_password
      loop:
        - not-a-user
        - not-a-user
        - not-a-user
        - not-a-user
        - not-a-user
        - not-a-user
        - not-a-user
        - not-a-user
      register: command_result
      failed_when: "'Permission denied' not in command_result.stdout"

    - name: Wait for expected alert
      block:

        - name: Wait for the alert to be generated
          pause:
            seconds: 5

        - name: Check if the alert has been sent to Slack
          wait_for:
            path: "{{ integrations_log }}"
            search_regex: hooks.slack.com
            timeout: 5

      always:

        - name: Get alert json
          include_role:
            name: manage_alerts
            tasks_from: get_alert_json.yaml

        # Get messages from Slack channel using the API of Slack
        - name: Run the script using python3 (Get messages from Slack channel)
          script: "{{ SLACK_API_SCRIPT }} -t {{ slack_token }} -c {{ slack_channel }} -m 1 -p {{ slack_messages_log }}"

        - name: Get Slack messages log
          fetch:
            src: "{{ slack_messages_log }}"
            dest: /tmp/
            flat: true
